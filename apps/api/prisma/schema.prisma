// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(uuid())
  username    String  @unique @db.VarChar(39) // GitHub username same as GithubId
  name        String  @db.VarChar(200) // Full name from GitHub
  createdAt   DateTime @default(now())
  Post        Post[]
  Reply       Reply[]
  Likes       Like[]

  @@index([username])
}

model Post {
  id         String   @id @default(uuid())
  userId     String
  content    String   @db.VarChar(500)
  createdAt  DateTime @default(now())
  replies    Reply[]
  likesCount Int      @default(0)
  user       User     @relation(fields: [userId], references: [id])
  likes      Like[]
}

model Reply {
  id         String   @id @default(uuid())
  postId     String
  userId     String
  content    String   @db.VarChar(500)
  createdAt  DateTime @default(now())
  likesCount Int      @default(0)
  post       Post     @relation(fields: [postId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  likes     Like[]
}



model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId  String? @map("post_id")
  post    Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  replyId String? @map("reply_id")
  reply   Reply?  @relation(fields: [replyId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, postId], name: "unique_user_post_like")
  @@unique([userId, replyId], name: "unique_user_reply_like")
}
